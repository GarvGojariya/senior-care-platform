// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String   @map("password_hash")
  role             Role
  firstName        String   @map("first_name")
  lastName         String   @map("last_name")
  phone            String?
  emergencyContact String?  @map("emergency_contact")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  medications          Medication[]
  createdMedications   Medication[]          @relation("CreatedBy")
  confirmations        Confirmation[]
  caregiverRelations   CaregiverRelation[]   @relation("Caregiver")
  seniorRelations      CaregiverRelation[]   @relation("Senior")
  passwordResets       PasswordReset[]
  buzzerLogs           BuzzerLog[]
  triggeredBuzzerLogs  BuzzerLog[]           @relation("TriggeredBy")
  notifications        Notification[]
  notificationSettings NotificationSetting[]
  fcmTokens            FCMToken[]

  @@map("users")
}

model Medication {
  id                   String   @id @default(cuid())
  userId               String   @map("user_id")
  name                 String
  dosage               String
  instructions         String?
  prescriptionImageUrl String?  @map("prescription_image_url")
  createdBy            String   @map("created_by")
  isActive             Boolean  @default(true) @map("is_active")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  creator   User       @relation("CreatedBy", fields: [createdBy], references: [id])
  schedules Schedule[]

  @@index([userId, isActive])
  @@index([createdBy, isActive])
  @@map("medications")
}

model Schedule {
  id                    String             @id @default(cuid())
  medicationId          String             @map("medication_id")
  time                  String // Store as "HH:MM" format (legacy field)
  frequency             Frequency
  daysOfWeek            DaysOfWeek[]       @map("days_of_week")
  isActive              Boolean            @default(true) @map("is_active")
  description           String?
  reminderType          String?            @map("reminder_type") // "notification", "sms", "voice", "buzzer"
  reminderMinutesBefore Int?               @default(15) @map("reminder_minutes_before")
  doseTimes             Json?              @map("dose_times") // Array of dose times with labels
  lastNotificationSent  DateTime?          @map("last_notification_sent")
  nextNotificationDue   DateTime?          @map("next_notification_due")
  notificationStatus    NotificationStatus @default(PENDING) @map("notification_status")
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")

  // Relations
  medication    Medication     @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  confirmations Confirmation[]
  notifications Notification[]

  @@index([medicationId, isActive])
  @@index([frequency, isActive])
  @@index([reminderType, isActive])
  @@index([nextNotificationDue, isActive])
  @@index([notificationStatus, isActive])
  @@map("schedules")
}

model Confirmation {
  id             String              @id @default(cuid())
  scheduleId     String              @map("schedule_id")
  userId         String              @map("user_id")
  scheduledTime  DateTime            @map("scheduled_time")
  confirmedAt    DateTime?           @map("confirmed_at")
  method         ConfirmationMethod?
  notes          String?
  notificationId String?             @map("notification_id")
  createdAt      DateTime            @default(now()) @map("created_at")

  // Relations
  schedule     Schedule      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id])
  notification Notification? @relation(fields: [notificationId], references: [id])

  @@index([userId, scheduledTime])
  @@index([scheduleId, scheduledTime])
  @@index([notificationId])
  @@map("confirmations")
}

model CaregiverRelation {
  id           String   @id @default(cuid())
  caregiverId  String   @map("caregiver_id")
  seniorId     String   @map("senior_id")
  relationship String // "family", "professional", "friend"
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  caregiver User @relation("Caregiver", fields: [caregiverId], references: [id])
  senior    User @relation("Senior", fields: [seniorId], references: [id])

  @@unique([caregiverId, seniorId])
  @@index([caregiverId, isActive])
  @@index([seniorId, isActive])
  @@map("caregiver_relations")
}

model BuzzerLog {
  id          String          @id @default(cuid())
  userId      String          @map("user_id")
  triggeredBy String?         @map("triggered_by") // caregiver who triggered manually
  triggeredAt DateTime        @default(now()) @map("triggered_at")
  stoppedAt   DateTime?       @map("stopped_at")
  intensity   BuzzerIntensity
  reason      String? // "medication_reminder", "manual_trigger", "emergency"

  // Relations
  user            User  @relation(fields: [userId], references: [id])
  triggeredByUser User? @relation("TriggeredBy", fields: [triggeredBy], references: [id])

  @@index([userId, triggeredAt])
  @@map("buzzer_logs")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  email     String
  otp       String
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Notification {
  id           String              @id @default(cuid())
  scheduleId   String              @map("schedule_id")
  userId       String              @map("user_id")
  type         NotificationType
  channel      NotificationChannel
  status       NotificationStatus  @default(PENDING)
  title        String
  message      String
  scheduledFor DateTime            @map("scheduled_for")
  sentAt       DateTime?           @map("sent_at")
  deliveredAt  DateTime?           @map("delivered_at")
  readAt       DateTime?           @map("read_at")
  confirmedAt  DateTime?           @map("confirmed_at")
  retryCount   Int                 @default(0) @map("retry_count")
  maxRetries   Int                 @default(3) @map("max_retries")
  errorMessage String?             @map("error_message")
  metadata     Json? // Additional data like delivery receipts
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")

  // Relations
  schedule      Schedule          @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id])
  confirmations Confirmation[]
  logs          NotificationLog[]

  @@index([scheduleId, scheduledFor])
  @@index([userId, scheduledFor])
  @@index([status, scheduledFor])
  @@index([channel, status])
  @@map("notifications")
}

model NotificationLog {
  id             String             @id @default(cuid())
  notificationId String             @map("notification_id")
  event          NotificationEvent
  status         NotificationStatus
  message        String?
  metadata       Json? // Additional event data
  createdAt      DateTime           @default(now()) @map("created_at")

  // Relations
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId, createdAt])
  @@index([event, createdAt])
  @@map("notification_logs")
}

model NotificationTemplate {
  id        String              @id @default(cuid())
  name      String              @unique
  type      NotificationType
  channel   NotificationChannel
  title     String
  content   String // Template content with placeholders
  variables String[] // Array of variable names used in template
  isActive  Boolean             @default(true) @map("is_active")
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")

  @@index([type, channel, isActive])
  @@map("notification_templates")
}

model NotificationSetting {
  id                     String              @id @default(cuid())
  userId                 String              @map("user_id")
  channel                NotificationChannel
  isEnabled              Boolean             @default(true) @map("is_enabled")
  preferredTime          String?             @map("preferred_time") // "HH:MM" format
  timezone               String?             @default("UTC")
  quietHoursStart        String?             @map("quiet_hours_start") // "HH:MM" format
  quietHoursEnd          String?             @map("quiet_hours_end") // "HH:MM" format
  maxNotificationsPerDay Int?                @map("max_notifications_per_day")
  createdAt              DateTime            @default(now()) @map("created_at")
  updatedAt              DateTime            @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel])
  @@index([userId, isEnabled])
  @@map("notification_settings")
}

model FCMToken {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  token      String   @unique
  deviceId   String?  @map("device_id")
  deviceType String?  @map("device_type") // "android", "ios", "web"
  appVersion String?  @map("app_version")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([deviceId, isActive])
  @@index([token])
  @@map("fcm_tokens")
}

// Enums
enum Role {
  SENIOR
  CAREGIVER
  ADMIN
}

enum Frequency {
  ONCE
  TWICE
  THREE_TIMES
  FOUR_TIMES
}

enum ConfirmationMethod {
  APP
  SMS
  VOICE
  BUZZER
}

enum BuzzerIntensity {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum NotificationType {
  MEDICATION_REMINDER
  MISSED_DOSE_ALERT
  CONFIRMATION_REQUEST
  ESCALATION_ALERT
  SYSTEM_NOTIFICATION
}

enum NotificationChannel {
  EMAIL
  SMS
  VOICE
  BUZZER
  PUSH
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  CONFIRMED
  FAILED
  CANCELLED
}

enum NotificationEvent {
  CREATED
  QUEUED
  SENT
  DELIVERED
  READ
  CONFIRMED
  FAILED
  RETRY
  CANCELLED
}
